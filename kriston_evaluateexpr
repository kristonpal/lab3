/*
Program: To evaluate postfix expression.
* Author: Kriston Pal
* Date: 13/07/2016
- * Ref: Data Structures. Using C and C++, Chap 2, page 100
*/

#define MAXITEMS 50
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

typedef struct{
	int top;
	int items [MAXITEMS];
}stack;

void push(stack* , int);
int pop (stack*);
int operation(char,int,int);

int main()
{
	stack s;
	char exp[MAXITEMS],symb;
	s.top= -1;
	int i,opnd1,opnd2,value;
	
	printf("Enter the postfix expression\n");
	gets(exp);
	
	for (i=0;i<strlen(exp);i++)
	{
		symb=exp[i];
	if ((symb>='0')&&(symb<='9')) //find whether exp is numeric or operator
	{
	push (&s,(symb-'0'));
    }
	else if(symb=='+'||symb=='-'||symb=='*'||symb=='/'||symb=='$')
	{
		opnd2= pop(&s);
		opnd1= pop(&s);
		value= operation(symb,opnd1,opnd2);
		push (&s,value);
		}
    }
    printf("The evaluated value is:\n %d",pop(&s));
	
}

void push (stack*s, int x)
{
	if(s-> top==MAXITEMS-1)
	{
		printf("overflow");
		exit(0);
	}else
	{
	++s-> top;
	s-> items [s->top]=x;
	s++;
}
}

int pop (stack*s)
{
	if (s->top == -1)
	{
		printf("stack underflow");
		exit(0);
	}
	return s->items[s->top--];
}

int operation(char sign,int opnd1,int opnd2)
{
	switch(sign)
	{
		case'+' : return (opnd1 + opnd2);
		case'-' : return (opnd1 - opnd2);
		case'*' : return (opnd1 * opnd2);
		case'/' : return (opnd1 / opnd2);
		case'$' : return (pow(opnd1,opnd2));
		default : printf("%s", "illegal operation");
		exit(1);
	}
}

